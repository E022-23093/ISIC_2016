#!/usr/bin/env python3

import argparse
import os
import json
import numpy as np
import glob
import threading
from PIL import Image
from collections import defaultdict
from tqdm import tqdm
import skimage.transform

# 参数解析
parser = argparse.ArgumentParser(description="Process existing images with Mapillary-compatible structure")
parser.add_argument("--path", type=str, required=True, 
                   help="Output path for processed dataset")
parser.add_argument("--existing-images-path", type=str, required=True,
                   help="Path to existing images directory")
parser.add_argument("--width", type=int, required=True,
                   help="Target width for processed images")
parser.add_argument("--height", type=int, required=True,
                   help="Target height for processed images")
parser.add_argument("--existing-width", type=int, default=512,
                   help="Width of existing images (default: 512)")
parser.add_argument("--existing-height", type=int, default=1024,
                   help="Height of existing images (default: 1024)")
parser.add_argument("--workers", type=int, default=8,
                   help="Number of worker threads for processing")
parser.add_argument("--sequence-size", type=int, default=100,
                   help="Number of images per virtual sequence (default: 100)")

args = parser.parse_args()

print(f"Processing existing images from: {args.existing_images_path}")
print(f"Existing image size: {args.existing_height}x{args.existing_width}")
print(f"Target size: {args.height}x{args.width}")
print(f"Output path: {args.path}")
print(f"Workers: {args.workers}")

def find_image_files(directory):
    """递归查找所有图片文件"""
    image_patterns = [
        os.path.join(directory, "**/*.jpg"),
        os.path.join(directory, "**/*.jpeg"),
        os.path.join(directory, "**/*.png"),
        os.path.join(directory, "**/*.JPG"),
        os.path.join(directory, "**/*.JPEG"),
        os.path.join(directory, "**/*.PNG"),
        os.path.join(directory, "**/*.bmp"),
        os.path.join(directory, "**/*.BMP"),
        os.path.join(directory, "**/*.tiff"),
        os.path.join(directory, "**/*.TIFF"),
    ]
    
    files = []
    for pattern in image_patterns:
        files.extend(glob.glob(pattern, recursive=True))
    
    # 按文件名排序以保证处理顺序的一致性
    files.sort()
    return files

def resize_image_pil(image_path, target_size):
    """使用PIL调整图片大小"""
    try:
        # 读取图片
        with Image.open(image_path) as img:
            # 转换为RGB模式（处理RGBA、灰度等格式）
            if img.mode != 'RGB':
                if img.mode in ['RGBA', 'LA', 'P']:
                    # 对于带透明通道或调色板的图片，先转换为RGB
                    img = img.convert('RGB')
                elif img.mode in ['L', '1']:
                    # 灰度图转RGB
                    return None, "Grayscale image"
                else:
                    img = img.convert('RGB')
            
            # 获取原始尺寸
            original_width, original_height = img.size
            
            # 计算缩放比例（保持宽高比）
            target_height, target_width = target_size
            scale_w = target_width / original_width
            scale_h = target_height / original_height
            scale = min(scale_w, scale_h)
            
            # 计算新的尺寸
            new_width = int(original_width * scale)
            new_height = int(original_height * scale)
            
            # 调整大小
            img_resized = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # 转换为numpy数组
            image_array = np.array(img_resized)
            
            return image_array, "success"
            
    except Exception as e:
        return None, str(e)

def resize_image_skimage(image_path, target_size):
    """使用skimage调整图片大小（备用方法）"""
    try:
        # 使用PIL读取，然后用skimage处理
        with Image.open(image_path) as img:
            if img.mode != 'RGB':
                if img.mode in ['RGBA', 'LA', 'P']:
                    img = img.convert('RGB')
                elif img.mode in ['L', '1']:
                    return None, "Grayscale image"
                else:
                    img = img.convert('RGB')
            
            # 转换为numpy数组
            image = np.array(img)
            
        # 使用skimage调整大小
        shape_in = np.asarray(image.shape[:2])
        shape_out = np.asarray(target_size)
        factor = np.amin(shape_out.astype("float") / shape_in) + 1e-6
        shape_resized = (shape_in * factor).astype("int")
        
        # 确保不超过目标尺寸
        shape_resized = np.minimum(shape_resized, shape_out)
        
        dtype = image.dtype
        image_resized = skimage.transform.resize(
            image.astype("float32"), 
            shape_resized, 
            order=1, 
            mode="constant", 
            preserve_range=True, 
            anti_aliasing=True
        )
        image_resized = image_resized.astype(dtype)
        
        return image_resized, "success"
        
    except Exception as e:
        return None, str(e)

def save_image_pil(image_array, output_path, quality=95):
    """使用PIL保存图片"""
    try:
        # 确保数组是正确的格式
        if image_array.dtype != np.uint8:
            image_array = np.clip(image_array, 0, 255).astype(np.uint8)
        
        # 转换为PIL Image
        img = Image.fromarray(image_array, 'RGB')
        
        # 保存为JPEG
        img.save(output_path, 'JPEG', quality=quality, optimize=True)
        return True
        
    except Exception as e:
        print(f"Error saving image: {e}")
        return False

def process_image(image_idx, image_path, output_path, target_size, folders_lock, use_skimage=False):
    """处理单个图片"""
    try:
        # 选择调整大小的方法
        if use_skimage:
            resized_image, msg = resize_image_skimage(image_path, target_size)
        else:
            resized_image, msg = resize_image_pil(image_path, target_size)
        
        if resized_image is None:
            return msg, None
        
        # 生成输出文件路径
        images_directory_levels = max(len(str(len(glob.glob(os.path.join(args.existing_images_path, "**/*"), recursive=True)))) - 2, 0)
        file = f"{image_idx:012}"[::-1]
        for i in reversed(range(images_directory_levels)):
            file = file[:i + 1] + "/" + file[i + 1:]
        output_file = os.path.join(output_path, "images", file)
        
        # 创建目录
        directory = os.path.dirname(output_file)
        if not os.path.exists(directory):
            with folders_lock:
                if not os.path.exists(directory):
                    os.makedirs(directory, exist_ok=True)
        
        # 保存调整后的图片
        image_output_path = output_file + f"-{target_size[0]}.jpg"
        if not save_image_pil(resized_image, image_output_path):
            return "failed to save image", None
        
        # 创建元数据
        basename = os.path.basename(image_path)
        sequence_id = image_idx // args.sequence_size
        
        metadata = {
            "timestamp": image_idx,
            "latlon": [0.0, 0.0],
            "sequence": f"sequence_{sequence_id:06d}",
            "camera-type": "perspective",
            "image-id": image_idx,
            "creator": "processed",
            "original_path": image_path,
            "original_filename": basename,
            "original_size": [args.existing_height, args.existing_width],
            "processed_size": list(target_size)
        }
        
        with open(output_file + ".json", "w") as f:
            json.dump(metadata, f, indent=2)
        
        # 返回成功信息
        sequence_name = metadata["sequence"]
        timestamp = metadata["timestamp"]
        latlon = np.array(metadata["latlon"])
        
        return "success", (sequence_name, timestamp, image_idx, latlon)
        
    except Exception as e:
        return f"error: {str(e)}", None

def process_existing_images():
    """处理已存在的图片"""
    # 查找所有图片文件
    existing_files = find_image_files(args.existing_images_path)
    
    if len(existing_files) == 0:
        print("No image files found in the specified directory")
        return [], 0
    
    print(f"Found {len(existing_files)} image files")
    
    # 创建输出目录
    output_images_path = os.path.join(args.path, "images")
    os.makedirs(output_images_path, exist_ok=True)
    
    # 多线程处理
    from concurrent.futures import ThreadPoolExecutor
    
    folders_lock = threading.Lock()
    results = defaultdict(lambda: 0)
    successes = []
    
    target_size = [args.height, args.width]
    
    with ThreadPoolExecutor(max_workers=args.workers) as executor:
        # 提交所有任务
        futures = []
        for image_idx, image_path in enumerate(existing_files):
            future = executor.submit(
                process_image, 
                image_idx, 
                image_path, 
                args.path, 
                target_size, 
                folders_lock,
                False  # 默认使用PIL方法
            )
            futures.append(future)
        
        # 收集结果
        for future in tqdm(futures, desc="Processing images"):
            try:
                msg, data = future.result()
                results[msg] += 1
                if msg == "success" and data is not None:
                    successes.append(data)
            except Exception as e:
                results[f"thread_error: {str(e)}"] += 1
    
    print("Processing results:")
    for k, v in results.items():
        print(f"   {k}: {v}")
    
    images_directory_levels = max(len(str(len(existing_files))) - 2, 0)
    return successes, images_directory_levels

def create_dataset_structure(successes, images_directory_levels):
    """创建数据集结构和元数据"""
    if len(successes) == 0:
        print("No images were successfully processed")
        return
    
    print("Creating dataset structure...")
    
    # 按序列分组
    sequences = defaultdict(list)
    for sequence_name, timestamp, image_idx, latlon in successes:
        sequences[sequence_name].append((timestamp, image_idx, latlon))
    
    images_num = len(successes)
    print(f"Processed {images_num} images in {len(sequences)} sequences")
    
    # 保存序列元数据
    seq_directory_levels = max(len(str(len(sequences))) - 2, 0)
    sequences_path = os.path.join(args.path, "sequences")
    os.makedirs(sequences_path, exist_ok=True)
    
    image_seqidx = np.zeros(images_num, dtype="int32") - 1
    
    for sequence_idx, (sequence_name, sequence) in enumerate(tqdm(sorted(sequences.items()), desc="Saving sequence metadata")):
        sequence = sorted(sequence)
        timestamps = [x[0] for x in sequence]
        image_indices = [x[1] for x in sequence]
        latlons = [x[2] for x in sequence]
        
        # 更新图片到序列的映射
        for img_idx in image_indices:
            if img_idx < len(image_seqidx):
                image_seqidx[img_idx] = sequence_idx
        
        # 生成序列文件路径
        file = f"{sequence_idx:012}"[::-1]
        for i in reversed(range(seq_directory_levels)):
            file = file[:i + 1] + "/" + file[i + 1:]
        file_path = os.path.join(sequences_path, file)
        
        directory = os.path.dirname(file_path)
        os.makedirs(directory, exist_ok=True)
        
        # 序列元数据
        metadata = {
            "name": sequence_name,
            "t0": timestamps[0] if timestamps else 0,
            "duration": (timestamps[-1] - timestamps[0]) if len(timestamps) > 1 else 0,
            "latlon0": latlons[0].tolist() if latlons else [0.0, 0.0],
            "image-indices": image_indices,
            "images-count": len(image_indices)
        }
        
        with open(file_path + ".json", "w") as f:
            json.dump(metadata, f, indent=2)
    
    # 保存序列索引映射
    np.savez_compressed(os.path.join(args.path, "sequence-idxs.npz"), sequence_idxs=image_seqidx)
    
    # 保存图片元数据汇总
    latlons = np.zeros([images_num, 2], dtype="float64")
    timestamps = np.zeros([images_num], dtype="uint64")
    
    # 从各个图片的JSON文件读取数据
    for _, timestamp, image_idx, latlon in tqdm(successes, desc="Collecting image metadata"):
        if image_idx < len(latlons):
            latlons[image_idx] = latlon
            timestamps[image_idx] = timestamp
    
    np.savez_compressed(os.path.join(args.path, "latlons.npz"), latlons=latlons)
    np.savez_compressed(os.path.join(args.path, "timestamps.npz"), timestamps=timestamps)
    
    # 数据集总体元数据
    dataset_metadata = {
        "images-num": images_num,
        "images-directory-levels": images_directory_levels,
        "sequences-num": len(sequences),
        "sequences-directory-levels": seq_directory_levels,
        "orig-resolution": [args.height, args.width],
        "source-resolution": [args.existing_height, args.existing_width],
        "processed-from-existing": True,
        "source-path": args.existing_images_path
    }
    
    with open(os.path.join(args.path, "dataset.json"), "w") as f:
        json.dump(dataset_metadata, f, indent=2)
    
    # 创建许可证文件
    with open(os.path.join(args.path, "LICENSE"), "w") as f:
        f.write("Processed from existing images. Original license may apply.")
    
    print(f"Dataset created successfully!")
    print(f"- {images_num} images processed")
    print(f"- {len(sequences)} sequences created") 
    print(f"- Output directory: {args.path}")

def main():
    """主函数"""
    # 验证输入
    if not os.path.exists(args.existing_images_path):
        raise ValueError(f"Existing images path does not exist: {args.existing_images_path}")
    
    # 创建输出目录
    os.makedirs(args.path, exist_ok=True)
    
    # 处理图片
    successes, images_directory_levels = process_existing_images()
    
    # 创建数据集结构
    create_dataset_structure(successes, images_directory_levels)
    
    print("Processing completed!")

if __name__ == "__main__":
    main()
